name: Release

on:
  push:
    branches:
      - master

jobs:
  unit-test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js
        id: setup-node
        uses: actions/setup-node@v4
        with:
          node-version-file: .node-version
          cache: npm

      - name: Install dependencies
        run: npm ci

      - name: Run tests
        run: npm test

  integration-test:
    concurrency:
      group: integration-test
      cancel-in-progress: false
    strategy:
      matrix:
        runner: ["ubuntu-latest", "windows-latest", "mac-latest"]
    runs-on: ${{ matrix.runner }}

    permissions:
      contents: read
      actions: write

    env:
      ARCHIVE_PATH: "vcpkg-cache"
      EXPECTED_CACHE_KEY_PREFIX: "vcpkg/"
      EXPECTED_RESTORED_ABI: "007b2dfb916d3d63a4d185bf1d8f244abfc9c6b409d4b82c04ce9658a7b51109"
      EXPECTED_SAVED_ABI_1: "01781cc1641e10e2bcb29c0bcdc49cb5ab4de33aea24b60183359cf5385bd6a2"
      EXPECTED_SAVED_ABI_2: "01b1381bcce126024defb1388e254b1ea9cb0b0d16c9bfcd4d0917cfbec4d74f"
      EXPECTED_SAVED_ABI_3: "0b4b1480038425969d0e4d3d044d27238bd0e7ce7e66dc94a324f0f2a2d90481"

    steps:
      - uses: actions/checkout@v4

      - name: Create mock cache entry to restore
        run: |
          mkdir -p "${{ env.ARCHIVE_PATH }}/00"
          touch "${{ env.ARCHIVE_PATH }}/00/${{ env.EXPECTED_RESTORED_ABI }}.zip"

      - name: Save mock cache entry
        uses: actions/cache@v4
        with:
          path: "${{ env.ARCHIVE_PATH }}/00/${{ env.EXPECTED_RESTORED_ABI }}.zip"
          key: ${{ env.EXPECTED_CACHE_KEY_PREFIX }}${{ env.EXPECTED_RESTORED_ABI }}

      - name: Remove cache from disk
        run: rm -r "${{ env.ARCHIVE_PATH }}"

      - name: Test cache restore
        id: vcpkg-cache
        env:
          INPUT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node dist/restore/index.js

      - name: Assert path set to absolute location
        run: test "${{ steps.vcpkg-cache.outputs.path }}" = "${{ github.workspace }}"

      - name: Assert cache restored
        run: test -f "${{ env.EXPECTED_RESTORED_CACHE_KEY }}"

      - name: Create mock cache entries to save
        run: |
          mkdir -p "${{ env.ARCHIVE_PATH }}/01"
          mkdir -p "${{ env.ARCHIVE_PATH }}/0b"
          touch "${{ env.EXPECTED_SAVED_CACHE_KEY_1 }}"
          touch "${{ env.EXPECTED_SAVED_CACHE_KEY_2 }}"
          touch "${{ env.EXPECTED_SAVED_CACHE_KEY_3 }}"

      - name: Test cache save
        env:
          INPUT_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: node dist/save/index.js

      - name: Assert caches saved
        uses: actions/github-script@v7
        with:
          script: |
            const { data: { actions_caches: cacheEntries } } = await github.rest.actions.getActionsCacheList({
              ...context.repo,
              key: "${{ env.ARCHIVE_PATH }}"
            });

            const expectedCacheEntries = new Set([
              "${{ env.EXPECTED_SAVED_CACHE_KEY_1 }}",
              "${{ env.EXPECTED_SAVED_CACHE_KEY_2 }}",
              "${{ env.EXPECTED_SAVED_CACHE_KEY_3 }}"
            ]);
            const actualCacheEntries = new Set(cacheEntries.map(c => c.key));

            const missingCacheEntries = expectedCacheEntries.difference(actualCacheEntries);
            if (missingCacheEntries.length > 0) {
              core.setFailed(`The following cache entries were missing: ${Array.from(missingCacheEntries).join(", ")}`);
            }

      - name: Delete test caches
        uses: actions/github-script@v7
        if: always()
        with:
          script: |
            const { data: { actions_caches: cacheEntries } } = await github.rest.actions.getActionsCacheList({
              ...context.repo
            });

            for (const cacheEntry of cacheEntries) {
              try {
                await github.rest.actions.deleteActionsCacheByKey({
                  ...context.repo,
                  key: cacheEntry.key
                });
                core.info(`Cleaned up cache entry '${cacheEntry.key}'`);
              } catch (error) {
                core.error(`Failed to clean up cache entry '${cacheEntry.key}': ${error.message}`);
              }
            }

  release:
    runs-on: ubuntu-latest
    needs:
      - unit-test
      - integration-test

    permissions:
      contents: write

    steps:
      - uses: actions/checkout@v4

      - name: Parse CHANGELOG.md
        uses: mindsers/changelog-reader-action@v2
        id: changelog
        with:
          validation_level: warn

      - name: Determine major version
        uses: actions/github-script@v5
        id: major-version
        with:
          script: |
            const version = "${{ steps.changelog.outputs.version }}";
            return version.split(".")[0];
          result-encoding: "string"

      - name: Push granular release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: "v${{ steps.changelog.outputs.version }}"
          name: "v${{ steps.changelog.outputs.version }}"
          body: ${{ steps.changelog.outputs.changes }}
          make_latest: false

      - name: Push major version release
        uses: softprops/action-gh-release@v2
        id: major-release
        with:
          tag_name: "v${{ steps.major-version.outputs.result }}"
          name: "v${{ steps.major-version.outputs.result }}"
          body: ${{ steps.changelog.outputs.changes }}
          make_latest: true

      # softprops/action-gh-release won't update the release tag if a release was already created
      - name: Bump major tag
        uses: actions/github-script@v5
        with:
          script: |
            const version = "${{ steps.changelog.outputs.version }}";
            const majorVersion = version.split(".")[0];
            const ref = `tags/v${majorVersion}`;
            github.rest.git.updateRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref,
              sha: context.sha
            });
